// Generated by zig-wayland

const std = @import("std");
const posix = std.posix;
const client = @import("wayland.zig").client;
const common = @import("common.zig");pub const PointerGesturesV1 = opaque {
 pub const generated_version = 3;
 pub const interface = &common.zwp.pointer_gestures_v1.interface;pub fn setQueue(_pointer_gestures_v1: *PointerGesturesV1, _queue: *client.wl.EventQueue) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);
    _proxy.setQueue(_queue);
}pub fn getSwipeGesture(_pointer_gestures_v1: *PointerGesturesV1, _pointer:*client.wl.Pointer) !*client.zwp.PointerGestureSwipeV1{const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);var _args = [_]common.Argument{.{ .o = null },.{ .o = @ptrCast(_pointer) },};
return @ptrCast(try _proxy.marshalConstructor(0, &_args, client.zwp.PointerGestureSwipeV1.interface));}
pub fn getPinchGesture(_pointer_gestures_v1: *PointerGesturesV1, _pointer:*client.wl.Pointer) !*client.zwp.PointerGesturePinchV1{const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);var _args = [_]common.Argument{.{ .o = null },.{ .o = @ptrCast(_pointer) },};
return @ptrCast(try _proxy.marshalConstructor(1, &_args, client.zwp.PointerGesturePinchV1.interface));}
pub fn release(_pointer_gestures_v1: *PointerGesturesV1) void {const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);_proxy.marshal(2, null);_proxy.destroy();}
pub fn getHoldGesture(_pointer_gestures_v1: *PointerGesturesV1, _pointer:*client.wl.Pointer) !*client.zwp.PointerGestureHoldV1{const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);var _args = [_]common.Argument{.{ .o = null },.{ .o = @ptrCast(_pointer) },};
return @ptrCast(try _proxy.marshalConstructor(3, &_args, client.zwp.PointerGestureHoldV1.interface));}
pub fn destroy(_pointer_gestures_v1: *PointerGesturesV1) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gestures_v1);
    _proxy.destroy();
}};
pub const PointerGestureSwipeV1 = opaque {
 pub const generated_version = 2;
 pub const interface = &common.zwp.pointer_gesture_swipe_v1.interface;pub fn setQueue(_pointer_gesture_swipe_v1: *PointerGestureSwipeV1, _queue: *client.wl.EventQueue) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_swipe_v1);
    _proxy.setQueue(_queue);
}pub const Event = union(enum) {begin: struct {serial:u32,time:u32,surface:?*client.wl.Surface,fingers:u32,},
update: struct {time:u32,dx:common.Fixed,dy:common.Fixed,},
end: struct {serial:u32,time:u32,cancelled:i32,},
};
pub inline fn setListener(
    _pointer_gesture_swipe_v1: *PointerGestureSwipeV1,
    comptime T: type,
    _listener: *const fn (pointer_gesture_swipe_v1: *PointerGestureSwipeV1, event: Event, data: T) void,
    _data: T,
) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_swipe_v1);
    const _mut_data: ?*anyopaque = @ptrFromInt(@intFromPtr(_data));
    _proxy.addDispatcher(common.Dispatcher(PointerGestureSwipeV1, T).dispatcher, _listener, _mut_data);
}pub fn destroy(_pointer_gesture_swipe_v1: *PointerGestureSwipeV1) void {const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_swipe_v1);_proxy.marshal(0, null);_proxy.destroy();}
};
pub const PointerGesturePinchV1 = opaque {
 pub const generated_version = 2;
 pub const interface = &common.zwp.pointer_gesture_pinch_v1.interface;pub fn setQueue(_pointer_gesture_pinch_v1: *PointerGesturePinchV1, _queue: *client.wl.EventQueue) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_pinch_v1);
    _proxy.setQueue(_queue);
}pub const Event = union(enum) {begin: struct {serial:u32,time:u32,surface:?*client.wl.Surface,fingers:u32,},
update: struct {time:u32,dx:common.Fixed,dy:common.Fixed,scale:common.Fixed,rotation:common.Fixed,},
end: struct {serial:u32,time:u32,cancelled:i32,},
};
pub inline fn setListener(
    _pointer_gesture_pinch_v1: *PointerGesturePinchV1,
    comptime T: type,
    _listener: *const fn (pointer_gesture_pinch_v1: *PointerGesturePinchV1, event: Event, data: T) void,
    _data: T,
) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_pinch_v1);
    const _mut_data: ?*anyopaque = @ptrFromInt(@intFromPtr(_data));
    _proxy.addDispatcher(common.Dispatcher(PointerGesturePinchV1, T).dispatcher, _listener, _mut_data);
}pub fn destroy(_pointer_gesture_pinch_v1: *PointerGesturePinchV1) void {const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_pinch_v1);_proxy.marshal(0, null);_proxy.destroy();}
};
pub const PointerGestureHoldV1 = opaque {
 pub const generated_version = 3;
 pub const interface = &common.zwp.pointer_gesture_hold_v1.interface;pub fn setQueue(_pointer_gesture_hold_v1: *PointerGestureHoldV1, _queue: *client.wl.EventQueue) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_hold_v1);
    _proxy.setQueue(_queue);
}pub const Event = union(enum) {begin: struct {serial:u32,time:u32,surface:?*client.wl.Surface,fingers:u32,},
end: struct {serial:u32,time:u32,cancelled:i32,},
};
pub inline fn setListener(
    _pointer_gesture_hold_v1: *PointerGestureHoldV1,
    comptime T: type,
    _listener: *const fn (pointer_gesture_hold_v1: *PointerGestureHoldV1, event: Event, data: T) void,
    _data: T,
) void {
    const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_hold_v1);
    const _mut_data: ?*anyopaque = @ptrFromInt(@intFromPtr(_data));
    _proxy.addDispatcher(common.Dispatcher(PointerGestureHoldV1, T).dispatcher, _listener, _mut_data);
}pub fn destroy(_pointer_gesture_hold_v1: *PointerGestureHoldV1) void {const _proxy: *client.wl.Proxy = @ptrCast(_pointer_gesture_hold_v1);_proxy.marshal(0, null);_proxy.destroy();}
};
