// Generated by zig-wayland

// Copyright 2014 © Stephen "Lyude" Chandler Paul
// Copyright 2015-2024 © Red Hat, Inc.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice (including the
// next paragraph) shall be included in all copies or substantial
// portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

// This description provides a high-level overview of the interplay between
// the interfaces defined this protocol. For details, see the protocol
// specification.
// 
// More than one tablet may exist, and device-specifics matter. Tablets are
// not represented by a single virtual device like wl_pointer. A client
// binds to the tablet manager object which is just a proxy object. From
// that, the client requests wp_tablet_manager.get_tablet_seat(wl_seat)
// and that returns the actual interface that has all the tablets. With
// this indirection, we can avoid merging wp_tablet into the actual Wayland
// protocol, a long-term benefit.
// 
// The wp_tablet_seat sends a "tablet added" event for each tablet
// connected. That event is followed by descriptive events about the
// hardware; currently that includes events for name, vid/pid and
// a wp_tablet.path event that describes a local path. This path can be
// used to uniquely identify a tablet or get more information through
// libwacom. Emulated or nested tablets can skip any of those, e.g. a
// virtual tablet may not have a vid/pid. The sequence of descriptive
// events is terminated by a wp_tablet.done event to signal that a client
// may now finalize any initialization for that tablet.
// 
// Events from tablets require a tool in proximity. Tools are also managed
// by the tablet seat; a "tool added" event is sent whenever a tool is new
// to the compositor. That event is followed by a number of descriptive
// events about the hardware; currently that includes capabilities,
// hardware id and serial number, and tool type. Similar to the tablet
// interface, a wp_tablet_tool.done event is sent to terminate that initial
// sequence.
// 
// Any event from a tool happens on the wp_tablet_tool interface. When the
// tool gets into proximity of the tablet, a proximity_in event is sent on
// the wp_tablet_tool interface, listing the tablet and the surface. That
// event is followed by a motion event with the coordinates. After that,
// it's the usual motion, axis, button, etc. events. The protocol's
// serialisation means events are grouped by wp_tablet_tool.frame events.
// 
// Two special events (that don't exist in X) are down and up. They signal
// "tip touching the surface". For tablets without real proximity
// detection, the sequence is: proximity_in, motion, down, frame.
// 
// When the tool leaves proximity, a proximity_out event is sent. If any
// button is still down, a button release event is sent before this
// proximity event. These button events are sent in the same frame as the
// proximity event to signal to the client that the buttons were held when
// the tool left proximity.
// 
// If the tool moves out of the surface but stays in proximity (i.e.
// between windows), compositor-specific grab policies apply. This usually
// means that the proximity-out is delayed until all buttons are released.
// 
// Moving a tool physically from one tablet to the other has no real effect
// on the protocol, since we already have the tool object from the "tool
// added" event. All the information is already there and the proximity
// events on both tablets are all a client needs to reconstruct what
// happened.
// 
// Some extra axes are normalized, i.e. the client knows the range as
// specified in the protocol (e.g. [0, 65535]), the granularity however is
// unknown. The current normalized axes are pressure, distance, and slider.
// 
// Other extra axes are in physical units as specified in the protocol.
// The current extra axes with physical units are tilt, rotation and
// wheel rotation.
// 
// Since tablets work independently of the pointer controlled by the mouse,
// the focus handling is independent too and controlled by proximity.
// The wp_tablet_tool.set_cursor request sets a tool-specific cursor.
// This cursor surface may be the same as the mouse cursor, and it may be
// the same across tools but it is possible to be more fine-grained. For
// example, a client may set different cursors for the pen and eraser.
// 
// Tools are generally independent of tablets and it is
// compositor-specific policy when a tool can be removed. Common approaches
// will likely include some form of removing a tool when all tablets the
// tool was used on are removed.
// 

const server = @import("wayland.zig").server;
const common = @import("common.zig");pub const TabletManagerV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_manager_v2.interface;pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletManagerV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletManagerV2, _version, _id));
}pub fn destroy(_tablet_manager_v2: *TabletManagerV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletManagerV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_manager_v2: *TabletManagerV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).getLink();
}pub fn getClient(_tablet_manager_v2: *TabletManagerV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).getClient();
}pub fn getId(_tablet_manager_v2: *TabletManagerV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).getId();
}pub fn getVersion(_tablet_manager_v2: *TabletManagerV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).getVersion();
}pub fn postNoMemory(_tablet_manager_v2: *TabletManagerV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).postNoMemory();
}pub fn getUserData(_tablet_manager_v2: *TabletManagerV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_manager_v2)).getUserData();
}pub const Request = union(enum) {get_tablet_seat: struct {tablet_seat:u32,seat:*server.wl.Seat,},
destroy: void,};
pub inline fn setHandler(
    _tablet_manager_v2: *TabletManagerV2,
    comptime T: type,
    handle_request: *const fn (_tablet_manager_v2: *TabletManagerV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_manager_v2: *TabletManagerV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_manager_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletManagerV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletManagerV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}};
pub const TabletSeatV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_seat_v2.interface;pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletSeatV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletSeatV2, _version, _id));
}pub fn destroy(_tablet_seat_v2: *TabletSeatV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletSeatV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_seat_v2: *TabletSeatV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).getLink();
}pub fn getClient(_tablet_seat_v2: *TabletSeatV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).getClient();
}pub fn getId(_tablet_seat_v2: *TabletSeatV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).getId();
}pub fn getVersion(_tablet_seat_v2: *TabletSeatV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).getVersion();
}pub fn postNoMemory(_tablet_seat_v2: *TabletSeatV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).postNoMemory();
}pub fn getUserData(_tablet_seat_v2: *TabletSeatV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_seat_v2)).getUserData();
}pub const Request = union(enum) {destroy: void,};
pub inline fn setHandler(
    _tablet_seat_v2: *TabletSeatV2,
    comptime T: type,
    handle_request: *const fn (_tablet_seat_v2: *TabletSeatV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_seat_v2: *TabletSeatV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_seat_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletSeatV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletSeatV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendTabletAdded(_tablet_seat_v2: *TabletSeatV2, _id:*server.zwp.TabletV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_seat_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_id) },};
_resource.postEvent(0, &_args);}
pub fn sendToolAdded(_tablet_seat_v2: *TabletSeatV2, _id:*server.zwp.TabletToolV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_seat_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_id) },};
_resource.postEvent(1, &_args);}
pub fn sendPadAdded(_tablet_seat_v2: *TabletSeatV2, _id:*server.zwp.TabletPadV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_seat_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_id) },};
_resource.postEvent(2, &_args);}
};
pub const TabletV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_v2.interface;pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletV2, _version, _id));
}pub fn destroy(_tablet_v2: *TabletV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_v2: *TabletV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).getLink();
}pub fn getClient(_tablet_v2: *TabletV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).getClient();
}pub fn getId(_tablet_v2: *TabletV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).getId();
}pub fn getVersion(_tablet_v2: *TabletV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).getVersion();
}pub fn postNoMemory(_tablet_v2: *TabletV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).postNoMemory();
}pub fn getUserData(_tablet_v2: *TabletV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_v2)).getUserData();
}pub const Request = union(enum) {destroy: void,};
pub inline fn setHandler(
    _tablet_v2: *TabletV2,
    comptime T: type,
    handle_request: *const fn (_tablet_v2: *TabletV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_v2: *TabletV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendName(_tablet_v2: *TabletV2, _name:[*:0]const u8) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);var _args = [_]common.Argument{.{ .s = _name},};
_resource.postEvent(0, &_args);}
pub fn sendId(_tablet_v2: *TabletV2, _vid:u32, _pid:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);var _args = [_]common.Argument{.{ .u = _vid},.{ .u = _pid},};
_resource.postEvent(1, &_args);}
pub fn sendPath(_tablet_v2: *TabletV2, _path:[*:0]const u8) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);var _args = [_]common.Argument{.{ .s = _path},};
_resource.postEvent(2, &_args);}
pub fn sendDone(_tablet_v2: *TabletV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);_resource.postEvent(3, null);}
pub fn sendRemoved(_tablet_v2: *TabletV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_v2);_resource.postEvent(4, null);}
};
pub const TabletToolV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_tool_v2.interface;pub const Type = common.zwp.tablet_tool_v2.Type;
pub const Capability = common.zwp.tablet_tool_v2.Capability;
pub const ButtonState = common.zwp.tablet_tool_v2.ButtonState;
pub const Error = common.zwp.tablet_tool_v2.Error;
pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletToolV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletToolV2, _version, _id));
}pub fn destroy(_tablet_tool_v2: *TabletToolV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletToolV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_tool_v2: *TabletToolV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).getLink();
}pub fn getClient(_tablet_tool_v2: *TabletToolV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).getClient();
}pub fn getId(_tablet_tool_v2: *TabletToolV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).getId();
}pub fn getVersion(_tablet_tool_v2: *TabletToolV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).getVersion();
}pub fn postNoMemory(_tablet_tool_v2: *TabletToolV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).postNoMemory();
}pub fn getUserData(_tablet_tool_v2: *TabletToolV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_tool_v2)).getUserData();
}pub fn postError(tablet_tool_v2: *TabletToolV2, _err: Error, _message: [*:0]const u8) void {
    return @as(*server.wl.Resource, @ptrCast(tablet_tool_v2)).postError(@intCast(@intFromEnum(_err)), _message);
}pub const Request = union(enum) {set_cursor: struct {serial:u32,surface:?*server.wl.Surface,hotspot_x:i32,hotspot_y:i32,},
destroy: void,};
pub inline fn setHandler(
    _tablet_tool_v2: *TabletToolV2,
    comptime T: type,
    handle_request: *const fn (_tablet_tool_v2: *TabletToolV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_tool_v2: *TabletToolV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletToolV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletToolV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendType(_tablet_tool_v2: *TabletToolV2, _tool_type:Type) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = switch (@typeInfo(Type )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_tool_type))),
    .Struct => @bitCast(_tool_type),
    else => unreachable,
 }},};
_resource.postEvent(0, &_args);}
pub fn sendHardwareSerial(_tablet_tool_v2: *TabletToolV2, _hardware_serial_hi:u32, _hardware_serial_lo:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _hardware_serial_hi},.{ .u = _hardware_serial_lo},};
_resource.postEvent(1, &_args);}
pub fn sendHardwareIdWacom(_tablet_tool_v2: *TabletToolV2, _hardware_id_hi:u32, _hardware_id_lo:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _hardware_id_hi},.{ .u = _hardware_id_lo},};
_resource.postEvent(2, &_args);}
pub fn sendCapability(_tablet_tool_v2: *TabletToolV2, _capability:Capability) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = switch (@typeInfo(Capability )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_capability))),
    .Struct => @bitCast(_capability),
    else => unreachable,
 }},};
_resource.postEvent(3, &_args);}
pub fn sendDone(_tablet_tool_v2: *TabletToolV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);_resource.postEvent(4, null);}
pub fn sendRemoved(_tablet_tool_v2: *TabletToolV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);_resource.postEvent(5, null);}
pub fn sendProximityIn(_tablet_tool_v2: *TabletToolV2, _serial:u32, _tablet:*server.zwp.TabletV2, _surface:*server.wl.Surface) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _serial},.{ .o = @ptrCast(_tablet) },.{ .o = @ptrCast(_surface) },};
_resource.postEvent(6, &_args);}
pub fn sendProximityOut(_tablet_tool_v2: *TabletToolV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);_resource.postEvent(7, null);}
pub fn sendDown(_tablet_tool_v2: *TabletToolV2, _serial:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _serial},};
_resource.postEvent(8, &_args);}
pub fn sendUp(_tablet_tool_v2: *TabletToolV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);_resource.postEvent(9, null);}
pub fn sendMotion(_tablet_tool_v2: *TabletToolV2, _x:common.Fixed, _y:common.Fixed) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .f = _x},.{ .f = _y},};
_resource.postEvent(10, &_args);}
pub fn sendPressure(_tablet_tool_v2: *TabletToolV2, _pressure:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _pressure},};
_resource.postEvent(11, &_args);}
pub fn sendDistance(_tablet_tool_v2: *TabletToolV2, _distance:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _distance},};
_resource.postEvent(12, &_args);}
pub fn sendTilt(_tablet_tool_v2: *TabletToolV2, _tilt_x:common.Fixed, _tilt_y:common.Fixed) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .f = _tilt_x},.{ .f = _tilt_y},};
_resource.postEvent(13, &_args);}
pub fn sendRotation(_tablet_tool_v2: *TabletToolV2, _degrees:common.Fixed) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .f = _degrees},};
_resource.postEvent(14, &_args);}
pub fn sendSlider(_tablet_tool_v2: *TabletToolV2, _position:i32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .i = _position},};
_resource.postEvent(15, &_args);}
pub fn sendWheel(_tablet_tool_v2: *TabletToolV2, _degrees:common.Fixed, _clicks:i32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .f = _degrees},.{ .i = _clicks},};
_resource.postEvent(16, &_args);}
pub fn sendButton(_tablet_tool_v2: *TabletToolV2, _serial:u32, _button:u32, _state:ButtonState) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _serial},.{ .u = _button},.{ .u = switch (@typeInfo(ButtonState )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_state))),
    .Struct => @bitCast(_state),
    else => unreachable,
 }},};
_resource.postEvent(17, &_args);}
pub fn sendFrame(_tablet_tool_v2: *TabletToolV2, _time:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_tool_v2);var _args = [_]common.Argument{.{ .u = _time},};
_resource.postEvent(18, &_args);}
};
pub const TabletPadV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_pad_v2.interface;pub const ButtonState = common.zwp.tablet_pad_v2.ButtonState;
pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletPadV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletPadV2, _version, _id));
}pub fn destroy(_tablet_pad_v2: *TabletPadV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletPadV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_pad_v2: *TabletPadV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).getLink();
}pub fn getClient(_tablet_pad_v2: *TabletPadV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).getClient();
}pub fn getId(_tablet_pad_v2: *TabletPadV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).getId();
}pub fn getVersion(_tablet_pad_v2: *TabletPadV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).getVersion();
}pub fn postNoMemory(_tablet_pad_v2: *TabletPadV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).postNoMemory();
}pub fn getUserData(_tablet_pad_v2: *TabletPadV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_v2)).getUserData();
}pub const Request = union(enum) {set_feedback: struct {button:u32,description:[*:0]const u8,serial:u32,},
destroy: void,};
pub inline fn setHandler(
    _tablet_pad_v2: *TabletPadV2,
    comptime T: type,
    handle_request: *const fn (_tablet_pad_v2: *TabletPadV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_pad_v2: *TabletPadV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletPadV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletPadV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendGroup(_tablet_pad_v2: *TabletPadV2, _pad_group:*server.zwp.TabletPadGroupV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_pad_group) },};
_resource.postEvent(0, &_args);}
pub fn sendPath(_tablet_pad_v2: *TabletPadV2, _path:[*:0]const u8) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .s = _path},};
_resource.postEvent(1, &_args);}
pub fn sendButtons(_tablet_pad_v2: *TabletPadV2, _buttons:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .u = _buttons},};
_resource.postEvent(2, &_args);}
pub fn sendDone(_tablet_pad_v2: *TabletPadV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);_resource.postEvent(3, null);}
pub fn sendButton(_tablet_pad_v2: *TabletPadV2, _time:u32, _button:u32, _state:ButtonState) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .u = _time},.{ .u = _button},.{ .u = switch (@typeInfo(ButtonState )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_state))),
    .Struct => @bitCast(_state),
    else => unreachable,
 }},};
_resource.postEvent(4, &_args);}
pub fn sendEnter(_tablet_pad_v2: *TabletPadV2, _serial:u32, _tablet:*server.zwp.TabletV2, _surface:*server.wl.Surface) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .u = _serial},.{ .o = @ptrCast(_tablet) },.{ .o = @ptrCast(_surface) },};
_resource.postEvent(5, &_args);}
pub fn sendLeave(_tablet_pad_v2: *TabletPadV2, _serial:u32, _surface:*server.wl.Surface) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);var _args = [_]common.Argument{.{ .u = _serial},.{ .o = @ptrCast(_surface) },};
_resource.postEvent(6, &_args);}
pub fn sendRemoved(_tablet_pad_v2: *TabletPadV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_v2);_resource.postEvent(7, null);}
};
pub const TabletPadGroupV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_pad_group_v2.interface;pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletPadGroupV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletPadGroupV2, _version, _id));
}pub fn destroy(_tablet_pad_group_v2: *TabletPadGroupV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletPadGroupV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_pad_group_v2: *TabletPadGroupV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).getLink();
}pub fn getClient(_tablet_pad_group_v2: *TabletPadGroupV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).getClient();
}pub fn getId(_tablet_pad_group_v2: *TabletPadGroupV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).getId();
}pub fn getVersion(_tablet_pad_group_v2: *TabletPadGroupV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).getVersion();
}pub fn postNoMemory(_tablet_pad_group_v2: *TabletPadGroupV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).postNoMemory();
}pub fn getUserData(_tablet_pad_group_v2: *TabletPadGroupV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_group_v2)).getUserData();
}pub const Request = union(enum) {destroy: void,};
pub inline fn setHandler(
    _tablet_pad_group_v2: *TabletPadGroupV2,
    comptime T: type,
    handle_request: *const fn (_tablet_pad_group_v2: *TabletPadGroupV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_pad_group_v2: *TabletPadGroupV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletPadGroupV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletPadGroupV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendButtons(_tablet_pad_group_v2: *TabletPadGroupV2, _buttons:*common.Array) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);var _args = [_]common.Argument{.{ .a = _buttons},};
_resource.postEvent(0, &_args);}
pub fn sendRing(_tablet_pad_group_v2: *TabletPadGroupV2, _ring:*server.zwp.TabletPadRingV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_ring) },};
_resource.postEvent(1, &_args);}
pub fn sendStrip(_tablet_pad_group_v2: *TabletPadGroupV2, _strip:*server.zwp.TabletPadStripV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);var _args = [_]common.Argument{.{ .o = @ptrCast(_strip) },};
_resource.postEvent(2, &_args);}
pub fn sendModes(_tablet_pad_group_v2: *TabletPadGroupV2, _modes:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);var _args = [_]common.Argument{.{ .u = _modes},};
_resource.postEvent(3, &_args);}
pub fn sendDone(_tablet_pad_group_v2: *TabletPadGroupV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);_resource.postEvent(4, null);}
pub fn sendModeSwitch(_tablet_pad_group_v2: *TabletPadGroupV2, _time:u32, _serial:u32, _mode:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_group_v2);var _args = [_]common.Argument{.{ .u = _time},.{ .u = _serial},.{ .u = _mode},};
_resource.postEvent(5, &_args);}
};
pub const TabletPadRingV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_pad_ring_v2.interface;pub const Source = common.zwp.tablet_pad_ring_v2.Source;
pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletPadRingV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletPadRingV2, _version, _id));
}pub fn destroy(_tablet_pad_ring_v2: *TabletPadRingV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletPadRingV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_pad_ring_v2: *TabletPadRingV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).getLink();
}pub fn getClient(_tablet_pad_ring_v2: *TabletPadRingV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).getClient();
}pub fn getId(_tablet_pad_ring_v2: *TabletPadRingV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).getId();
}pub fn getVersion(_tablet_pad_ring_v2: *TabletPadRingV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).getVersion();
}pub fn postNoMemory(_tablet_pad_ring_v2: *TabletPadRingV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).postNoMemory();
}pub fn getUserData(_tablet_pad_ring_v2: *TabletPadRingV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_ring_v2)).getUserData();
}pub const Request = union(enum) {set_feedback: struct {description:[*:0]const u8,serial:u32,},
destroy: void,};
pub inline fn setHandler(
    _tablet_pad_ring_v2: *TabletPadRingV2,
    comptime T: type,
    handle_request: *const fn (_tablet_pad_ring_v2: *TabletPadRingV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_pad_ring_v2: *TabletPadRingV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_ring_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletPadRingV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletPadRingV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendSource(_tablet_pad_ring_v2: *TabletPadRingV2, _source:Source) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_ring_v2);var _args = [_]common.Argument{.{ .u = switch (@typeInfo(Source )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_source))),
    .Struct => @bitCast(_source),
    else => unreachable,
 }},};
_resource.postEvent(0, &_args);}
pub fn sendAngle(_tablet_pad_ring_v2: *TabletPadRingV2, _degrees:common.Fixed) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_ring_v2);var _args = [_]common.Argument{.{ .f = _degrees},};
_resource.postEvent(1, &_args);}
pub fn sendStop(_tablet_pad_ring_v2: *TabletPadRingV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_ring_v2);_resource.postEvent(2, null);}
pub fn sendFrame(_tablet_pad_ring_v2: *TabletPadRingV2, _time:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_ring_v2);var _args = [_]common.Argument{.{ .u = _time},};
_resource.postEvent(3, &_args);}
};
pub const TabletPadStripV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_pad_strip_v2.interface;pub const Source = common.zwp.tablet_pad_strip_v2.Source;
pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletPadStripV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletPadStripV2, _version, _id));
}pub fn destroy(_tablet_pad_strip_v2: *TabletPadStripV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletPadStripV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_pad_strip_v2: *TabletPadStripV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).getLink();
}pub fn getClient(_tablet_pad_strip_v2: *TabletPadStripV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).getClient();
}pub fn getId(_tablet_pad_strip_v2: *TabletPadStripV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).getId();
}pub fn getVersion(_tablet_pad_strip_v2: *TabletPadStripV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).getVersion();
}pub fn postNoMemory(_tablet_pad_strip_v2: *TabletPadStripV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).postNoMemory();
}pub fn getUserData(_tablet_pad_strip_v2: *TabletPadStripV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_strip_v2)).getUserData();
}pub const Request = union(enum) {set_feedback: struct {description:[*:0]const u8,serial:u32,},
destroy: void,};
pub inline fn setHandler(
    _tablet_pad_strip_v2: *TabletPadStripV2,
    comptime T: type,
    handle_request: *const fn (_tablet_pad_strip_v2: *TabletPadStripV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_pad_strip_v2: *TabletPadStripV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_strip_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletPadStripV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletPadStripV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendSource(_tablet_pad_strip_v2: *TabletPadStripV2, _source:Source) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_strip_v2);var _args = [_]common.Argument{.{ .u = switch (@typeInfo(Source )) {
    .Enum => @as(u32, @intCast(@intFromEnum(_source))),
    .Struct => @bitCast(_source),
    else => unreachable,
 }},};
_resource.postEvent(0, &_args);}
pub fn sendPosition(_tablet_pad_strip_v2: *TabletPadStripV2, _position:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_strip_v2);var _args = [_]common.Argument{.{ .u = _position},};
_resource.postEvent(1, &_args);}
pub fn sendStop(_tablet_pad_strip_v2: *TabletPadStripV2) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_strip_v2);_resource.postEvent(2, null);}
pub fn sendFrame(_tablet_pad_strip_v2: *TabletPadStripV2, _time:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_strip_v2);var _args = [_]common.Argument{.{ .u = _time},};
_resource.postEvent(3, &_args);}
};
pub const TabletPadDialV2 = opaque {
 pub const generated_version = 1;
 pub const interface = &common.zwp.tablet_pad_dial_v2.interface;pub fn create(_client: *server.wl.Client, _version: u32, _id: u32) !*TabletPadDialV2 {
    return @ptrCast(try server.wl.Resource.create(_client, TabletPadDialV2, _version, _id));
}pub fn destroy(_tablet_pad_dial_v2: *TabletPadDialV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).destroy();
}pub fn fromLink(_link: *server.wl.list.Link) *TabletPadDialV2 {
    return @ptrCast(server.wl.Resource.fromLink(_link));
}pub fn getLink(_tablet_pad_dial_v2: *TabletPadDialV2) *server.wl.list.Link {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).getLink();
}pub fn getClient(_tablet_pad_dial_v2: *TabletPadDialV2) *server.wl.Client {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).getClient();
}pub fn getId(_tablet_pad_dial_v2: *TabletPadDialV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).getId();
}pub fn getVersion(_tablet_pad_dial_v2: *TabletPadDialV2) u32 {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).getVersion();
}pub fn postNoMemory(_tablet_pad_dial_v2: *TabletPadDialV2) void {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).postNoMemory();
}pub fn getUserData(_tablet_pad_dial_v2: *TabletPadDialV2) ?*anyopaque {
    return @as(*server.wl.Resource, @ptrCast(_tablet_pad_dial_v2)).getUserData();
}pub const Request = union(enum) {set_feedback: struct {description:[*:0]const u8,serial:u32,},
destroy: void,};
pub inline fn setHandler(
    _tablet_pad_dial_v2: *TabletPadDialV2,
    comptime T: type,
    handle_request: *const fn (_tablet_pad_dial_v2: *TabletPadDialV2, request: Request, data: T) void,
    comptime handle_destroy: ?fn (_tablet_pad_dial_v2: *TabletPadDialV2, data: T) void,
    _data: T,
) void {
    const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_dial_v2);
    _resource.setDispatcher(
        common.Dispatcher(TabletPadDialV2, T).dispatcher,
        handle_request,
        @ptrFromInt(@intFromPtr(_data)),
        if (handle_destroy) |_handler| struct {
            fn _wrapper(__resource: *server.wl.Resource) callconv(.C) void {
                @call(.always_inline, _handler, .{
                    @as(*TabletPadDialV2, @ptrCast(__resource)),
                    @as(T, @ptrCast(@alignCast(__resource.getUserData()))),
                });
            }
        }._wrapper else null,
    );
}pub fn sendDelta(_tablet_pad_dial_v2: *TabletPadDialV2, _value120:i32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_dial_v2);var _args = [_]common.Argument{.{ .i = _value120},};
_resource.postEvent(0, &_args);}
pub fn sendFrame(_tablet_pad_dial_v2: *TabletPadDialV2, _time:u32) void {const _resource: *server.wl.Resource = @ptrCast(_tablet_pad_dial_v2);var _args = [_]common.Argument{.{ .u = _time},};
_resource.postEvent(1, &_args);}
};
