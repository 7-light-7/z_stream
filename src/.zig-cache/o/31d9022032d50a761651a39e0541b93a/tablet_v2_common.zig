// Generated by zig-wayland

// Copyright 2014 © Stephen "Lyude" Chandler Paul
// Copyright 2015-2024 © Red Hat, Inc.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice (including the
// next paragraph) shall be included in all copies or substantial
// portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

// This description provides a high-level overview of the interplay between
// the interfaces defined this protocol. For details, see the protocol
// specification.
// 
// More than one tablet may exist, and device-specifics matter. Tablets are
// not represented by a single virtual device like wl_pointer. A client
// binds to the tablet manager object which is just a proxy object. From
// that, the client requests wp_tablet_manager.get_tablet_seat(wl_seat)
// and that returns the actual interface that has all the tablets. With
// this indirection, we can avoid merging wp_tablet into the actual Wayland
// protocol, a long-term benefit.
// 
// The wp_tablet_seat sends a "tablet added" event for each tablet
// connected. That event is followed by descriptive events about the
// hardware; currently that includes events for name, vid/pid and
// a wp_tablet.path event that describes a local path. This path can be
// used to uniquely identify a tablet or get more information through
// libwacom. Emulated or nested tablets can skip any of those, e.g. a
// virtual tablet may not have a vid/pid. The sequence of descriptive
// events is terminated by a wp_tablet.done event to signal that a client
// may now finalize any initialization for that tablet.
// 
// Events from tablets require a tool in proximity. Tools are also managed
// by the tablet seat; a "tool added" event is sent whenever a tool is new
// to the compositor. That event is followed by a number of descriptive
// events about the hardware; currently that includes capabilities,
// hardware id and serial number, and tool type. Similar to the tablet
// interface, a wp_tablet_tool.done event is sent to terminate that initial
// sequence.
// 
// Any event from a tool happens on the wp_tablet_tool interface. When the
// tool gets into proximity of the tablet, a proximity_in event is sent on
// the wp_tablet_tool interface, listing the tablet and the surface. That
// event is followed by a motion event with the coordinates. After that,
// it's the usual motion, axis, button, etc. events. The protocol's
// serialisation means events are grouped by wp_tablet_tool.frame events.
// 
// Two special events (that don't exist in X) are down and up. They signal
// "tip touching the surface". For tablets without real proximity
// detection, the sequence is: proximity_in, motion, down, frame.
// 
// When the tool leaves proximity, a proximity_out event is sent. If any
// button is still down, a button release event is sent before this
// proximity event. These button events are sent in the same frame as the
// proximity event to signal to the client that the buttons were held when
// the tool left proximity.
// 
// If the tool moves out of the surface but stays in proximity (i.e.
// between windows), compositor-specific grab policies apply. This usually
// means that the proximity-out is delayed until all buttons are released.
// 
// Moving a tool physically from one tablet to the other has no real effect
// on the protocol, since we already have the tool object from the "tool
// added" event. All the information is already there and the proximity
// events on both tablets are all a client needs to reconstruct what
// happened.
// 
// Some extra axes are normalized, i.e. the client knows the range as
// specified in the protocol (e.g. [0, 65535]), the granularity however is
// unknown. The current normalized axes are pressure, distance, and slider.
// 
// Other extra axes are in physical units as specified in the protocol.
// The current extra axes with physical units are tilt, rotation and
// wheel rotation.
// 
// Since tablets work independently of the pointer controlled by the mouse,
// the focus handling is independent too and controlled by proximity.
// The wp_tablet_tool.set_cursor request sets a tool-specific cursor.
// This cursor surface may be the same as the mouse cursor, and it may be
// the same across tools but it is possible to be more fine-grained. For
// example, a client may set different cursors for the pen and eraser.
// 
// Tools are generally independent of tablets and it is
// compositor-specific policy when a tool can be removed. Common approaches
// will likely include some form of removing a tool when all tablets the
// tool was used on are removed.
// 

const common = @import("common.zig");pub const tablet_manager_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_manager_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "get_tablet_seat", .signature = "no",.types = &.{blk: {
    _ = common.zwp.tablet_seat_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_seat_v2_interface" });
},blk: {
    _ = common.wl.seat;
    break :blk @extern(*const common.Interface, .{ .name = "wl_seat_interface" });
},},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 0,.events = null,};comptime {
    @export(interface, .{
        .name = "zwp_tablet_manager_v2_interface",
        .visibility = .hidden,
    });
}};pub const tablet_seat_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_seat_v2",
    .version = 2,
    .method_count = 1,.methods = &.{.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 3,.events = &.{.{ .name = "tablet_added", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_v2_interface" });
},},},.{ .name = "tool_added", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_tool_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_tool_v2_interface" });
},},},.{ .name = "pad_added", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_pad_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_pad_v2_interface" });
},},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_seat_v2_interface",
        .visibility = .hidden,
    });
}};pub const tablet_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_v2",
    .version = 2,
    .method_count = 1,.methods = &.{.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 6,.events = &.{.{ .name = "name", .signature = "s",.types = &.{null,},},.{ .name = "id", .signature = "uu",.types = &.{null,null,},},.{ .name = "path", .signature = "s",.types = &.{null,},},.{ .name = "done", .signature = "",.types = null,},.{ .name = "removed", .signature = "",.types = null,},.{ .name = "bustype", .signature = "2u",.types = &.{null,},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_v2_interface",
        .visibility = .hidden,
    });
}};pub const tablet_tool_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_tool_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "set_cursor", .signature = "u?oii",.types = &.{null,blk: {
    _ = common.wl.surface;
    break :blk @extern(*const common.Interface, .{ .name = "wl_surface_interface" });
},null,null,},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 19,.events = &.{.{ .name = "type", .signature = "u",.types = &.{null,},},.{ .name = "hardware_serial", .signature = "uu",.types = &.{null,null,},},.{ .name = "hardware_id_wacom", .signature = "uu",.types = &.{null,null,},},.{ .name = "capability", .signature = "u",.types = &.{null,},},.{ .name = "done", .signature = "",.types = null,},.{ .name = "removed", .signature = "",.types = null,},.{ .name = "proximity_in", .signature = "uoo",.types = &.{null,blk: {
    _ = common.zwp.tablet_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_v2_interface" });
},blk: {
    _ = common.wl.surface;
    break :blk @extern(*const common.Interface, .{ .name = "wl_surface_interface" });
},},},.{ .name = "proximity_out", .signature = "",.types = null,},.{ .name = "down", .signature = "u",.types = &.{null,},},.{ .name = "up", .signature = "",.types = null,},.{ .name = "motion", .signature = "ff",.types = &.{null,null,},},.{ .name = "pressure", .signature = "u",.types = &.{null,},},.{ .name = "distance", .signature = "u",.types = &.{null,},},.{ .name = "tilt", .signature = "ff",.types = &.{null,null,},},.{ .name = "rotation", .signature = "f",.types = &.{null,},},.{ .name = "slider", .signature = "i",.types = &.{null,},},.{ .name = "wheel", .signature = "fi",.types = &.{null,null,},},.{ .name = "button", .signature = "uuu",.types = &.{null,null,null,},},.{ .name = "frame", .signature = "u",.types = &.{null,},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_tool_v2_interface",
        .visibility = .hidden,
    });
}pub const Type = enum(c_int) {pen= 0x140,eraser= 0x141,brush= 0x142,pencil= 0x143,airbrush= 0x144,finger= 0x145,mouse= 0x146,lens= 0x147,_,};
pub const Capability = enum(c_int) {tilt= 1,pressure= 2,distance= 3,rotation= 4,slider= 5,wheel= 6,_,};
pub const ButtonState = enum(c_int) {released= 0,pressed= 1,_,};
pub const Error = enum(c_int) {role= 0,_,};
};pub const tablet_pad_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_pad_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "set_feedback", .signature = "usu",.types = &.{null,null,null,},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 8,.events = &.{.{ .name = "group", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_pad_group_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_pad_group_v2_interface" });
},},},.{ .name = "path", .signature = "s",.types = &.{null,},},.{ .name = "buttons", .signature = "u",.types = &.{null,},},.{ .name = "done", .signature = "",.types = null,},.{ .name = "button", .signature = "uuu",.types = &.{null,null,null,},},.{ .name = "enter", .signature = "uoo",.types = &.{null,blk: {
    _ = common.zwp.tablet_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_v2_interface" });
},blk: {
    _ = common.wl.surface;
    break :blk @extern(*const common.Interface, .{ .name = "wl_surface_interface" });
},},},.{ .name = "leave", .signature = "uo",.types = &.{null,blk: {
    _ = common.wl.surface;
    break :blk @extern(*const common.Interface, .{ .name = "wl_surface_interface" });
},},},.{ .name = "removed", .signature = "",.types = null,},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_pad_v2_interface",
        .visibility = .hidden,
    });
}pub const ButtonState = enum(c_int) {released= 0,pressed= 1,_,};
};pub const tablet_pad_group_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_pad_group_v2",
    .version = 2,
    .method_count = 1,.methods = &.{.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 7,.events = &.{.{ .name = "buttons", .signature = "a",.types = &.{null,},},.{ .name = "ring", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_pad_ring_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_pad_ring_v2_interface" });
},},},.{ .name = "strip", .signature = "n",.types = &.{blk: {
    _ = common.zwp.tablet_pad_strip_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_pad_strip_v2_interface" });
},},},.{ .name = "modes", .signature = "u",.types = &.{null,},},.{ .name = "done", .signature = "",.types = null,},.{ .name = "mode_switch", .signature = "uuu",.types = &.{null,null,null,},},.{ .name = "dial", .signature = "2n",.types = &.{blk: {
    _ = common.zwp.tablet_pad_dial_v2;
    break :blk @extern(*const common.Interface, .{ .name = "zwp_tablet_pad_dial_v2_interface" });
},},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_pad_group_v2_interface",
        .visibility = .hidden,
    });
}};pub const tablet_pad_ring_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_pad_ring_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "set_feedback", .signature = "su",.types = &.{null,null,},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 4,.events = &.{.{ .name = "source", .signature = "u",.types = &.{null,},},.{ .name = "angle", .signature = "f",.types = &.{null,},},.{ .name = "stop", .signature = "",.types = null,},.{ .name = "frame", .signature = "u",.types = &.{null,},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_pad_ring_v2_interface",
        .visibility = .hidden,
    });
}pub const Source = enum(c_int) {finger= 1,_,};
};pub const tablet_pad_strip_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_pad_strip_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "set_feedback", .signature = "su",.types = &.{null,null,},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 4,.events = &.{.{ .name = "source", .signature = "u",.types = &.{null,},},.{ .name = "position", .signature = "u",.types = &.{null,},},.{ .name = "stop", .signature = "",.types = null,},.{ .name = "frame", .signature = "u",.types = &.{null,},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_pad_strip_v2_interface",
        .visibility = .hidden,
    });
}pub const Source = enum(c_int) {finger= 1,_,};
};pub const tablet_pad_dial_v2 = struct {pub const interface: common.Interface = .{
    .name = "zwp_tablet_pad_dial_v2",
    .version = 2,
    .method_count = 2,.methods = &.{.{ .name = "set_feedback", .signature = "su",.types = &.{null,null,},},.{ .name = "destroy", .signature = "",.types = null,},},.event_count = 2,.events = &.{.{ .name = "delta", .signature = "i",.types = &.{null,},},.{ .name = "frame", .signature = "u",.types = &.{null,},},},};comptime {
    @export(interface, .{
        .name = "zwp_tablet_pad_dial_v2_interface",
        .visibility = .hidden,
    });
}};